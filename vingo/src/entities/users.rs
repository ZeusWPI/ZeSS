//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub updated_at: Option<DateTimeWithTimeZone>,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub username: Option<String>,
    pub admin: Option<bool>,
    pub settings_id: Option<i64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cards::Entity")]
    Cards,
    #[sea_orm(
        belongs_to = "super::settings::Entity",
        from = "Column::SettingsId",
        to = "super::settings::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Settings,
}

impl Related<super::cards::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cards.def()
    }
}

impl Related<super::settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Settings.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
