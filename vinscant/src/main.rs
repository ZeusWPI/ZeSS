use core::str;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop, hal::{
        gpio::{InputPin, OutputPin},
        prelude::Peripherals,
        spi::{self, SpiSingleDeviceDriver},
    }, mqtt::client::{EspMqttClient, MqttClientConfiguration}, sys::esp_task_wdt_deinit
};
use smart_led_effects::Srgb;
use std::time::{SystemTime, UNIX_EPOCH};
use ws2812_esp32_rmt_driver::{driver::color::LedPixelColorGrb24, LedPixelEsp32Rmt, RGB8};

use mfrc522::{comm::blocking::spi::SpiInterface, GenericUid, Mfrc522, Uid};

use lib::{
    buzzer::Buzzer, card_request::{send_card_to_server, CardError}, ping_pong::PingPong, status_notifier::StatusNotifier, wifi
};

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    auth_key: &'static str,
}

fn get_time() -> u64 {
    SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
}

fn main() {
    unsafe {
        esp_task_wdt_deinit();
    }
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take().unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let _wifi_thing = wifi::wifi(
        CONFIG.wifi_ssid,
        CONFIG.wifi_psk,
        peripherals.modem,
        sysloop,
    );

    let pins = peripherals.pins;

    #[cfg(feature = "esp32s2")]
    let scan_spi_device = SpiSingleDeviceDriver::new_single(
        peripherals.spi2,
        pins.gpio34.downgrade_output(),       // SCK
        pins.gpio35.downgrade_output(),       // MOSI
        Some(pins.gpio36.downgrade_input()),  // MISO
        Some(pins.gpio33.downgrade_output()), // CS/SDA
        &spi::config::DriverConfig::new(),
        &spi::config::Config::new(),
    )
    .unwrap();

    #[cfg(feature = "esp32")]
    let scan_spi_device = SpiSingleDeviceDriver::new_single(
        peripherals.spi2,
        pins.gpio0.downgrade_output(),        // SCK
        pins.gpio4.downgrade_output(),        // MOSI
        Some(pins.gpio27.downgrade_input()),  // MISO
        Some(pins.gpio13.downgrade_output()), // CS/SDA
        &spi::config::DriverConfig::new(),
        &spi::config::Config::new(),
    )
    .unwrap();

    let scan_interface = SpiInterface::new(scan_spi_device);
    let mut scanner = Mfrc522::new(scan_interface).init().unwrap();

    #[cfg(feature = "esp32s2")]
    let led_pin = pins.gpio17.downgrade_output();
    #[cfg(feature = "esp32")]
    let led_pin = pins.gpio5.downgrade_output();
    let channel = peripherals.rmt.channel0;
    let led_strip = LedPixelEsp32Rmt::<RGB8, LedPixelColorGrb24>::new(channel, led_pin).unwrap();

    #[cfg(feature = "esp32s2")]
    let buzzer = Buzzer::new(
        peripherals.ledc.timer0,
        peripherals.ledc.channel0,
        pins.gpio37.downgrade_output(),
    );
    #[cfg(feature = "esp32")]
    let buzzer = Buzzer::new(
        peripherals.ledc.timer0,
        peripherals.ledc.channel0,
        pins.gpio19.downgrade_output(),
    );

    let mut status_notifier = StatusNotifier {
        led_strip,
        leds: 8,
        idle_effect: Box::new(PingPong::new(8, vec![Srgb::new(0xff, 0x7f, 0x00)])),
        buzzer,
        mqtt_client: EspMqttClient::new("mqtt://koin.kelder.local", &MqttClientConfiguration{
            keep_alive_interval: Some(1),
            ..Default::default()
        }).unwrap().0
    };

    let mut last_uid: Uid = Uid::Single(GenericUid::new([0_u8; 4], 0));
    let mut last_time = 0;

    loop {
        if let Ok(answer) = scanner.reqa() {
            if let Ok(uid) = scanner.select(&answer) {
                if uid.as_bytes() == last_uid.as_bytes() && get_time() - last_time <= 15 {
                    log::error!("Card already seen!");
                    last_time = get_time();
                    status_notifier.bad();
                    continue;
                }
                log::info!("Card found: {}", hex::encode(uid.as_bytes()));
                last_time = get_time();
                last_uid = uid;
                status_notifier.processing();
                match send_card_to_server(&last_uid, CONFIG.auth_key) {
                    Ok(username) => {
                        log::info!("Hello {username}!");
                        status_notifier.good(username);
                    },
                    Err(CardError::ConnectionError(_)) => {
                        // allow retry on error
                        last_uid = Uid::Single(GenericUid::new([0_u8; 4], 0));
                        status_notifier.bad();
                    }
                    Err(_) => status_notifier.bad(),
                }
            }
        } else {
            status_notifier.idle();
        }
    }
}
