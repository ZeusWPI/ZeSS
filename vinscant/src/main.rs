use anyhow::{bail, Result};
use core::str;
use embedded_svc::{
    http::{client::Client, Method},
    io::Read,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop, hal::{
        gpio::{InputPin, OutputPin},
        prelude::Peripherals,
        spi::{
            self, SpiSingleDeviceDriver
            //config::{DriverConfig, Config},
        },
    }, http::client::{Configuration, EspHttpConnection}, sys::esp_task_wdt_deinit
};

use mfrc522::{
    comm::blocking::spi::SpiInterface,
    Mfrc522,
};

use lib::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    auth_key: &'static str,
}

fn main() {
    unsafe {
        esp_task_wdt_deinit();
    }
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take().unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    let _wifi_thing = wifi::wifi(app_config.wifi_ssid, app_config.wifi_psk, peripherals.modem, sysloop);

    let pins = peripherals.pins;

    let scan_spi_device = SpiSingleDeviceDriver::new_single(
        peripherals.spi2,
        // esp32s2
        //pins.gpio34.downgrade_output(), // SCK
        // esp32
        pins.gpio0.downgrade_output(), // SCK
        // esp32s2
        //pins.gpio35.downgrade_output(), // MOSI
        // esp32
        pins.gpio4.downgrade_output(), // MOSI
        // esp32s2
        //Some(pins.gpio36.downgrade_input()), // MISO
        // esp32
        Some(pins.gpio27.downgrade_input()), // MISO
        // esp32s2
        //Some(pins.gpio33.downgrade_output()), // CS/SDA
        // esp32
        Some(pins.gpio13.downgrade_output()), // CS/SDA
        &spi::config::DriverConfig::new(),
        &spi::config::Config::new()
    ).unwrap();
    let scan_interface = SpiInterface::new(scan_spi_device);
    let mut scanner = Mfrc522::new(scan_interface).init().unwrap();

    loop {
        if let Ok(answer) = scanner.reqa() {
            if let Ok(uid) =  scanner.select(&answer) {
                log::info!("Card found: {}", hex::encode(uid.as_bytes()));
                let mut client = Client::wrap(EspHttpConnection::new(&Configuration {
                    use_global_ca_store: true,
                    crt_bundle_attach: Some(esp_idf_svc::sys::esp_crt_bundle_attach),
                    ..Default::default()
                }).unwrap());

                let mut request = client.request(Method::Post, "https://zess.zeus.gent/api/scans".as_ref(), &[]).unwrap();
                request.write(format!("{};{}", hex::encode(uid.as_bytes()), app_config.auth_key).as_bytes());
                if let Ok(response) = request.submit() {
                    log::info!("response code: {}", response.status());
                }
            }
        }
    };
}
