use core::str;
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        gpio::{InputPin, OutputPin},
        prelude::Peripherals,
        spi::{self, SpiSingleDeviceDriver},
    },
    sys::esp_task_wdt_deinit,
};
use smart_led_effects::{strip::EffectIterator, Srgb};
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use ws2812_esp32_rmt_driver::{driver::color::LedPixelColorGrb24, LedPixelEsp32Rmt, RGB8};

use mfrc522::{comm::blocking::spi::SpiInterface, Mfrc522};

use lib::{
    buzzer::Buzzer,
    card_request::{send_card_to_server, CardError},
    ping_pong::PingPong,
    wifi,
};

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    auth_key: &'static str,
}

fn from_palette_rgb_to_rgb_rgb(value: &palette::rgb::Rgb<palette::encoding::Srgb, u8>) -> RGB8 {
    let [red, green, blue] = [value.red, value.green, value.blue];
    RGB8::new(red / 8, green / 8, blue / 8)
}

struct StatusNotifier<'a> {
    led_strip: LedPixelEsp32Rmt<'a, RGB8, LedPixelColorGrb24>,
    leds: usize,
    idle_effect: Box<dyn EffectIterator>,
    buzzer: Buzzer<'a>,
}
impl StatusNotifier<'_> {
    fn idle(&mut self) {
        let pixels = self.idle_effect.next().unwrap();
        let _ = self
            .led_strip
            .write_nocopy(pixels.iter().map(from_palette_rgb_to_rgb_rgb));
        self.buzzer.off();
    }
    fn processing(&mut self) {
        let pixels = std::iter::repeat(RGB8::new(0xff, 0xff, 0x00)).take(self.leds);
        let _ = self.led_strip.write_nocopy(pixels);
    }
    fn good(&mut self) {
        let pixels = std::iter::repeat(RGB8::new(0x00, 0xff, 0x00)).take(self.leds);
        let _ = self.led_strip.write_nocopy(pixels);
        self.buzzer.on(440.into());
        self.sleep(166);
        self.buzzer.on(880.into());
        self.sleep(166);
        self.buzzer.on(1760.into());
        self.sleep(166);
    }
    fn bad(&mut self) {
        let pixels = std::iter::repeat(RGB8::new(0xff, 0x00, 0x00)).take(self.leds);
        let _ = self.led_strip.write_nocopy(pixels);
        self.buzzer.on(220.into());
        self.sleep(250);
        self.buzzer.on(110.into());
        self.sleep(250);
    }
    fn sleep(&self, miliseconds: u64) {
        std::thread::sleep(Duration::from_millis(miliseconds));
    }
}

fn get_time() -> u64 {
    SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs()
}

fn main() {
    unsafe {
        esp_task_wdt_deinit();
    }
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take().unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let _wifi_thing = wifi::wifi(
        CONFIG.wifi_ssid,
        CONFIG.wifi_psk,
        peripherals.modem,
        sysloop,
    );

    let pins = peripherals.pins;

    #[cfg(feature = "esp32s2")]
    let scan_spi_device = SpiSingleDeviceDriver::new_single(
        peripherals.spi2,
        pins.gpio34.downgrade_output(),       // SCK
        pins.gpio35.downgrade_output(),       // MOSI
        Some(pins.gpio36.downgrade_input()),  // MISO
        Some(pins.gpio33.downgrade_output()), // CS/SDA
        &spi::config::DriverConfig::new(),
        &spi::config::Config::new(),
    )
    .unwrap();

    #[cfg(feature = "esp32")]
    let scan_spi_device = SpiSingleDeviceDriver::new_single(
        peripherals.spi2,
        pins.gpio0.downgrade_output(),        // SCK
        pins.gpio4.downgrade_output(),        // MOSI
        Some(pins.gpio27.downgrade_input()),  // MISO
        Some(pins.gpio13.downgrade_output()), // CS/SDA
        &spi::config::DriverConfig::new(),
        &spi::config::Config::new(),
    )
    .unwrap();

    let scan_interface = SpiInterface::new(scan_spi_device);
    let mut scanner = Mfrc522::new(scan_interface).init().unwrap();

    #[cfg(feature = "esp32s2")]
    let led_pin = pins.gpio17.downgrade_output();
    #[cfg(feature = "esp32")]
    let led_pin = pins.gpio5.downgrade_output();
    let channel = peripherals.rmt.channel0;
    let led_strip = LedPixelEsp32Rmt::<RGB8, LedPixelColorGrb24>::new(channel, led_pin).unwrap();

    #[cfg(feature = "esp32s2")]
    let buzzer = Buzzer::new(
        peripherals.ledc.timer0,
        peripherals.ledc.channel0,
        pins.gpio37.downgrade_output(),
    );
    #[cfg(feature = "esp32")]
    let mut buzzer = Buzzer::new(
        peripherals.ledc.timer0,
        peripherals.ledc.channel0,
        pins.gpio19.downgrade_output(),
    );

    let mut status_notifier = StatusNotifier {
        led_strip,
        leds: 8,
        idle_effect: Box::new(PingPong::new(8, vec![Srgb::new(0xff, 0x7f, 0x00)])),
        buzzer,
    };

    let mut last_uid: &mut [u8] = &mut [];
    let mut last_time = 0;

    loop {
        if let Ok(answer) = scanner.reqa() {
            if let Ok(uid) = scanner.select(&answer) {
                if uid.as_bytes() == last_uid && get_time() - last_time <= 15 {
                    log::error!("Card already seen!");
                    last_time = get_time();
                    status_notifier.bad();
                    continue;
                }
                last_time = get_time();
                last_uid.copy_from_slice(uid.as_bytes());
                status_notifier.processing();
                log::info!("Card found: {}", hex::encode(uid.as_bytes()));
                match send_card_to_server(uid, CONFIG.auth_key) {
                    Ok(_) => status_notifier.good(),
                    Err(CardError::ConnectionError(_)) => {
                        // allow retry on error
                        last_uid = &mut [];
                        status_notifier.bad();
                    }
                    Err(_) => status_notifier.bad(),
                }
            }
        } else {
            status_notifier.idle();
        }
    }
}
